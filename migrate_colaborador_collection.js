const { MongoClient } = require('mongodb');

async function migrateColaboradorCollection() {
  const client = new MongoClient(process.env.MONGODB_URI || 'mongodb://localhost:27017/condominio-sistema');
  
  try {
    await client.connect();
    console.log('‚úÖ Conectado ao MongoDB');
    
    const db = client.db();
    
    // 1. Verificar situa√ß√£o atual
    console.log('\n=== SITUA√á√ÉO ATUAL ===');
    const collections = await db.listCollections().toArray();
    const collectionNames = collections.map(c => c.name);
    
    const oldCollectionName = 'financeirocolaboradors';
    const newCollectionName = 'financeiro-colaboradores';
    
    const oldExists = collectionNames.includes(oldCollectionName);
    const newExists = collectionNames.includes(newCollectionName);
    
    console.log(`üìã Cole√ß√£o antiga "${oldCollectionName}": ${oldExists ? '‚úÖ EXISTE' : '‚ùå N√ÉO EXISTE'}`);
    console.log(`üìã Cole√ß√£o nova "${newCollectionName}": ${newExists ? '‚úÖ EXISTE' : '‚ùå N√ÉO EXISTE'}`);
    
    if (oldExists) {
      const oldCount = await db.collection(oldCollectionName).countDocuments();
      console.log(`üìä Documentos na cole√ß√£o antiga: ${oldCount}`);
    }
    
    if (newExists) {
      const newCount = await db.collection(newCollectionName).countDocuments();
      console.log(`üìä Documentos na cole√ß√£o nova: ${newCount}`);
    }
    
    // 2. Executar migra√ß√£o se necess√°rio
    if (oldExists && !newExists) {
      console.log('\n=== INICIANDO MIGRA√á√ÉO ===');
      console.log(`üîÑ Renomeando "${oldCollectionName}" para "${newCollectionName}"`);
      
      try {
        await db.collection(oldCollectionName).rename(newCollectionName);
        console.log('‚úÖ Migra√ß√£o conclu√≠da com sucesso!');
        
        // Verificar resultado
        const finalCount = await db.collection(newCollectionName).countDocuments();
        console.log(`üìä Documentos na nova cole√ß√£o: ${finalCount}`);
        
        // Verificar √≠ndices
        const indexes = await db.collection(newCollectionName).listIndexes().toArray();
        console.log(`üìä √çndices preservados: ${indexes.length}`);
        indexes.forEach(index => {
          console.log(`   - ${index.name}: ${JSON.stringify(index.key)}`);
        });
        
      } catch (error) {
        console.error('‚ùå Erro durante a migra√ß√£o:', error.message);
        return;
      }
      
    } else if (!oldExists && newExists) {
      console.log('\n‚úÖ MIGRA√á√ÉO J√Å CONCLU√çDA');
      console.log('A cole√ß√£o j√° est√° com o nome correto.');
      
    } else if (oldExists && newExists) {
      console.log('\n‚ö†Ô∏è  SITUA√á√ÉO AMB√çGUA');
      console.log('Ambas as cole√ß√µes existem. A√ß√£o manual necess√°ria.');
      
      const oldCount = await db.collection(oldCollectionName).countDocuments();
      const newCount = await db.collection(newCollectionName).countDocuments();
      
      console.log(`üìä Antiga: ${oldCount} documentos`);
      console.log(`üìä Nova: ${newCount} documentos`);
      
      if (oldCount > 0 && newCount === 0) {
        console.log('üí° Sugest√£o: A cole√ß√£o antiga tem dados, a nova est√° vazia.');
        console.log('   Considere fazer a migra√ß√£o manual dos dados.');
      } else if (oldCount === 0 && newCount > 0) {
        console.log('üí° Sugest√£o: A cole√ß√£o nova tem dados, a antiga est√° vazia.');
        console.log('   Considere remover a cole√ß√£o antiga vazia.');
      } else if (oldCount > 0 && newCount > 0) {
        console.log('üí° Sugest√£o: Ambas t√™m dados. Verifica√ß√£o manual necess√°ria.');
      }
      
    } else {
      console.log('\n‚ùå NENHUMA COLE√á√ÉO ENCONTRADA');
      console.log('Nem a cole√ß√£o antiga nem a nova existem.');
      console.log('üí° Isso √© normal se ainda n√£o foram criados dados de colaboradores.');
    }
    
    // 3. Verificar configura√ß√£o do modelo
    console.log('\n=== VERIFICA√á√ÉO DO MODELO ===');
    console.log('üîç Verificando se o modelo Mongoose est√° configurado corretamente...');
    
    // Ler o arquivo do modelo para verificar a configura√ß√£o
    const fs = require('fs');
    const path = require('path');
    
    try {
      const modelPath = path.join(__dirname, 'src', 'models', 'FinanceiroColaborador.ts');
      const modelContent = fs.readFileSync(modelPath, 'utf8');
      
      if (modelContent.includes("collection: 'financeiro-colaboradores'")) {
        console.log('‚úÖ Modelo configurado para usar: "financeiro-colaboradores"');
      } else if (modelContent.includes("collection: 'financeirocolaboradors'")) {
        console.log('‚ö†Ô∏è  Modelo ainda configurado para usar: "financeirocolaboradors"');
        console.log('üí° Considere atualizar o modelo para usar "financeiro-colaboradores"');
      } else {
        console.log('üîç Configura√ß√£o de cole√ß√£o n√£o encontrada no modelo (usando padr√£o)');
      }
    } catch (error) {
      console.log('‚ùå Erro ao ler arquivo do modelo:', error.message);
    }
    
    // 4. Resumo final
    console.log('\n=== RESUMO FINAL ===');
    const finalCollections = await db.listCollections().toArray();
    const finalNames = finalCollections.map(c => c.name);
    
    const finalOldExists = finalNames.includes(oldCollectionName);
    const finalNewExists = finalNames.includes(newCollectionName);
    
    console.log(`üìã Status final:`);
    console.log(`   - "${oldCollectionName}": ${finalOldExists ? '‚úÖ EXISTE' : '‚ùå N√ÉO EXISTE'}`);
    console.log(`   - "${newCollectionName}": ${finalNewExists ? '‚úÖ EXISTE' : '‚ùå N√ÉO EXISTE'}`);
    
    if (finalNewExists) {
      const finalCount = await db.collection(newCollectionName).countDocuments();
      console.log(`üìä Documentos na cole√ß√£o final: ${finalCount}`);
    }
    
    // Recomenda√ß√µes
    console.log('\n=== RECOMENDA√á√ïES ===');
    if (finalNewExists && !finalOldExists) {
      console.log('‚úÖ Migra√ß√£o bem-sucedida!');
      console.log('üí° O modelo Mongoose j√° est√° configurado para usar a cole√ß√£o correta.');
      console.log('üí° Testes podem ser executados para validar a funcionalidade.');
    } else if (finalOldExists && !finalNewExists) {
      console.log('‚ö†Ô∏è  Migra√ß√£o necess√°ria!');
      console.log('üí° Execute este script novamente para fazer a migra√ß√£o.');
    } else if (finalOldExists && finalNewExists) {
      console.log('‚ö†Ô∏è  Verifica√ß√£o manual necess√°ria!');
      console.log('üí° Ambas as cole√ß√µes existem - determine qual deve ser usada.');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o/migra√ß√£o:', error);
  } finally {
    await client.close();
    console.log('\n‚úÖ Conex√£o fechada');
  }
}

// Execute apenas se for chamado diretamente
if (require.main === module) {
  migrateColaboradorCollection();
}

module.exports = migrateColaboradorCollection;