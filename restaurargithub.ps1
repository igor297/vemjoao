# ========================================
# Script: restaurargithub.ps1
# Descri√ß√£o: Automatiza o processo de restaurar/sincronizar com o GitHub
# Autor: Gerado por Claude Code
# Data: 2025-06-30
# ========================================

param(
    [switch]$Force = $false,
    [switch]$Reset = $false,
    [string]$Branch = ""
)

# Fun√ß√£o para exibir mensagens coloridas
function Write-ColorMessage {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# Fun√ß√£o para verificar se estamos em um reposit√≥rio Git
function Test-GitRepository {
    try {
        git status | Out-Null
        return $true
    }
    catch {
        return $false
    }
}

# Fun√ß√£o para criar backup das mudan√ßas locais
function Backup-LocalChanges {
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $backupBranch = "backup_local_$timestamp"
    
    Write-ColorMessage "üíæ Criando backup das mudan√ßas locais..." "Yellow"
    
    try {
        git add .
        git commit -m "Backup autom√°tico antes de restaurar do GitHub - $timestamp"
        git branch $backupBranch
        
        Write-ColorMessage "‚úÖ Backup criado na branch: $backupBranch" "Green"
        return $backupBranch
    }
    catch {
        Write-ColorMessage "‚ö†Ô∏è  N√£o foi poss√≠vel criar backup (pode n√£o haver mudan√ßas)" "Yellow"
        return $null
    }
}

# Cabe√ßalho do script
Write-ColorMessage "========================================" "Cyan"
Write-ColorMessage "üîÑ SCRIPT DE RESTAURA√á√ÉO DO GITHUB" "Cyan"
Write-ColorMessage "========================================" "Cyan"
Write-Host ""

# Verificar se estamos em um reposit√≥rio Git
if (-not (Test-GitRepository)) {
    Write-ColorMessage "‚ùå ERRO: Este diret√≥rio n√£o √© um reposit√≥rio Git!" "Red"
    Write-ColorMessage "   Execute 'git init' ou navegue para um diret√≥rio Git v√°lido." "Yellow"
    exit 1
}

# Verificar branch atual
$branchAtual = git branch --show-current
if ([string]::IsNullOrWhiteSpace($Branch)) {
    $Branch = $branchAtual
}

Write-ColorMessage "üåø Branch atual: $branchAtual" "Blue"
Write-ColorMessage "üéØ Branch de destino: $Branch" "Blue"

# Verificar se h√° mudan√ßas locais
Write-ColorMessage "üîç Verificando mudan√ßas locais..." "Yellow"
$gitStatus = git status --porcelain
$hasUncommittedChanges = $gitStatus -ne $null

if ($hasUncommittedChanges -and -not $Force) {
    Write-ColorMessage "‚ö†Ô∏è  ATEN√á√ÉO: Existem mudan√ßas locais n√£o commitadas!" "Red"
    Write-Host ""
    Write-ColorMessage "üìä Mudan√ßas detectadas:" "Yellow"
    git status --short
    Write-Host ""
    
    Write-ColorMessage "ü§î O que voc√™ deseja fazer?" "Yellow"
    Write-ColorMessage "  1. Fazer backup e continuar (RECOMENDADO)" "Green"
    Write-ColorMessage "  2. Descartar mudan√ßas locais (PERIGOSO)" "Red"
    Write-ColorMessage "  3. Cancelar opera√ß√£o" "White"
    
    do {
        $escolha = Read-Host "Digite sua escolha (1, 2 ou 3)"
    } while ($escolha -notin @("1", "2", "3"))
    
    switch ($escolha) {
        "1" {
            $backupBranch = Backup-LocalChanges
        }
        "2" {
            Write-ColorMessage "üóëÔ∏è  Descartando mudan√ßas locais..." "Red"
            git reset --hard HEAD
            git clean -fd
        }
        "3" {
            Write-ColorMessage "‚ùå Opera√ß√£o cancelada pelo usu√°rio." "Yellow"
            exit 0
        }
    }
}

try {
    # Buscar atualiza√ß√µes do reposit√≥rio remoto
    Write-ColorMessage "üì° Buscando atualiza√ß√µes do GitHub..." "Yellow"
    git fetch origin
    
    if ($LASTEXITCODE -ne 0) {
        throw "Erro ao buscar atualiza√ß√µes do reposit√≥rio remoto"
    }
    
    Write-ColorMessage "‚úÖ Atualiza√ß√µes buscadas com sucesso!" "Green"

    # Verificar se a branch remota existe
    $remoteBranchExists = git ls-remote --heads origin $Branch | Select-String $Branch
    
    if (-not $remoteBranchExists) {
        Write-ColorMessage "‚ùå ERRO: Branch '$Branch' n√£o existe no reposit√≥rio remoto!" "Red"
        Write-ColorMessage "üìã Branches dispon√≠veis:" "Yellow"
        git branch -r
        exit 1
    }

    # Mudar para a branch especificada se necess√°rio
    if ($branchAtual -ne $Branch) {
        Write-ColorMessage "üîÑ Mudando para a branch: $Branch" "Yellow"
        
        # Verificar se a branch local existe
        $localBranchExists = git branch --list $Branch
        
        if ($localBranchExists) {
            git checkout $Branch
        } else {
            git checkout -b $Branch origin/$Branch
        }
        
        if ($LASTEXITCODE -ne 0) {
            throw "Erro ao mudar para a branch $Branch"
        }
    }

    # Fazer pull das mudan√ßas
    Write-ColorMessage "‚¨áÔ∏è  Baixando mudan√ßas do GitHub..." "Yellow"
    
    if ($Reset) {
        Write-ColorMessage "üîÑ Modo reset: for√ßando sincroniza√ß√£o completa..." "Red"
        git reset --hard origin/$Branch
    } else {
        git pull origin $Branch
    }
    
    if ($LASTEXITCODE -ne 0) {
        Write-ColorMessage "‚ö†Ô∏è  Poss√≠vel conflito detectado. Tentando merge autom√°tico..." "Yellow"
        
        # Tentar resolver conflitos automaticamente
        git pull origin $Branch --no-edit
        
        if ($LASTEXITCODE -ne 0) {
            throw "Conflitos de merge detectados que requerem resolu√ß√£o manual"
        }
    }

    Write-ColorMessage "‚úÖ Mudan√ßas baixadas com sucesso!" "Green"

    # Verificar se h√° depend√™ncias para instalar
    if (Test-Path "package.json") {
        Write-ColorMessage "üì¶ Verificando depend√™ncias do Node.js..." "Yellow"
        
        # Verificar se package-lock.json foi atualizado
        $packageLockChanged = git diff HEAD~1 HEAD --name-only | Select-String "package-lock.json"
        $packageJsonChanged = git diff HEAD~1 HEAD --name-only | Select-String "package.json"
        
        if ($packageLockChanged -or $packageJsonChanged) {
            Write-ColorMessage "üîß Depend√™ncias foram atualizadas. Executando npm install..." "Yellow"
            npm install
            
            if ($LASTEXITCODE -eq 0) {
                Write-ColorMessage "‚úÖ Depend√™ncias instaladas com sucesso!" "Green"
            } else {
                Write-ColorMessage "‚ö†Ô∏è  Aviso: Problemas na instala√ß√£o de depend√™ncias" "Yellow"
            }
        }
    }

    # Verificar status final
    Write-ColorMessage "üîç Status final:" "Blue"
    git status

    Write-Host ""
    Write-ColorMessage "========================================" "Green"
    Write-ColorMessage "üéâ RESTAURA√á√ÉO CONCLU√çDA COM SUCESSO!" "Green"
    Write-ColorMessage "========================================" "Green"
    Write-ColorMessage "üåø Branch ativa: $(git branch --show-current)" "White"
    Write-ColorMessage "üîÑ Status: Sincronizado com GitHub" "White"
    
    if ($backupBranch) {
        Write-ColorMessage "üíæ Backup criado em: $backupBranch" "White"
    }

} catch {
    Write-ColorMessage "========================================" "Red"
    Write-ColorMessage "‚ùå ERRO DURANTE A RESTAURA√á√ÉO!" "Red"
    Write-ColorMessage "========================================" "Red"
    Write-ColorMessage "Erro: $($_.Exception.Message)" "Red"
    Write-Host ""
    Write-ColorMessage "üîß Poss√≠veis solu√ß√µes:" "Yellow"
    Write-ColorMessage "  1. Verifique sua conex√£o com a internet" "White"
    Write-ColorMessage "  2. Resolva conflitos manualmente com 'git status'" "White"
    Write-ColorMessage "  3. Use o par√¢metro -Reset para for√ßar sincroniza√ß√£o" "White"
    Write-ColorMessage "  4. Execute 'git log --oneline -10' para ver hist√≥rico" "White"
    
    if ($backupBranch) {
        Write-ColorMessage "  5. Restaure o backup com 'git checkout $backupBranch'" "White"
    }
    
    exit 1
}

# Pausa para visualiza√ß√£o (opcional)
Write-Host ""
Write-ColorMessage "Pressione qualquer tecla para continuar..." "Gray"
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")