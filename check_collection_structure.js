const { MongoClient } = require('mongodb');

async function checkCollectionStructure() {
  const client = new MongoClient(process.env.MONGODB_URI || 'mongodb://localhost:27017/condominio-sistema');
  
  try {
    await client.connect();
    console.log('‚úÖ Conectado ao MongoDB');
    
    const db = client.db();
    
    // 1. Verificar a cole√ß√£o atual financeirocolaboradors
    console.log('\n=== ESTRUTURA DA COLE√á√ÉO: financeirocolaboradors ===');
    const currentCollection = 'financeirocolaboradors';
    const count = await db.collection(currentCollection).countDocuments();
    console.log(`üìä Total de documentos: ${count}`);
    
    if (count > 0) {
      // Pegar um documento de exemplo
      const sample = await db.collection(currentCollection).findOne();
      console.log('üìÑ Estrutura do documento:');
      console.log(JSON.stringify(sample, null, 2));
      
      // Verificar todos os campos √∫nicos na cole√ß√£o
      const allDocs = await db.collection(currentCollection).find({}).toArray();
      const allFields = new Set();
      
      allDocs.forEach(doc => {
        Object.keys(doc).forEach(key => allFields.add(key));
      });
      
      console.log('\nüìã Todos os campos encontrados na cole√ß√£o:');
      [...allFields].sort().forEach(field => {
        console.log(`   - ${field}`);
      });
    } else {
      console.log('‚ùå Cole√ß√£o vazia - nenhum documento encontrado');
    }
    
    // 2. Verificar qual cole√ß√£o o modelo atual est√° usando
    console.log('\n=== VERIFICA√á√ÉO DO MODELO vs COLE√á√ÉO ===');
    console.log('üîç Modelo FinanceiroColaborador est√° configurado para usar: "financeiro-colaboradores"');
    console.log('üîç Cole√ß√£o atual encontrada no DB: "financeirocolaboradors" (sem h√≠fen, sem "es" final)');
    console.log('‚ö†Ô∏è  DIVERG√äNCIA IDENTIFICADA!');
    
    // 3. Verificar se existe a cole√ß√£o com o nome correto do modelo
    const targetCollection = 'financeiro-colaboradores';
    const collections = await db.listCollections().toArray();
    const targetExists = collections.some(c => c.name === targetCollection);
    
    if (targetExists) {
      const targetCount = await db.collection(targetCollection).countDocuments();
      console.log(`‚úÖ Cole√ß√£o "${targetCollection}" existe com ${targetCount} documentos`);
    } else {
      console.log(`‚ùå Cole√ß√£o "${targetCollection}" N√ÉO existe`);
    }
    
    // 4. Verificar indexa√ß√£o na cole√ß√£o atual
    console.log('\n=== √çNDICES NA COLE√á√ÉO ATUAL ===');
    try {
      const indexes = await db.collection(currentCollection).listIndexes().toArray();
      console.log(`üìä Total de √≠ndices: ${indexes.length}`);
      
      indexes.forEach((index, i) => {
        console.log(`${i + 1}. ${index.name}:`);
        console.log(`   Campos: ${JSON.stringify(index.key)}`);
        if (index.unique) console.log('   üîí √önico');
        if (index.sparse) console.log('   üï≥Ô∏è  Esparso');
      });
    } catch (error) {
      console.log(`‚ùå Erro ao listar √≠ndices: ${error.message}`);
    }
    
    // 5. Verificar dados de teste/exemplo
    console.log('\n=== AN√ÅLISE DE DADOS PARA MIGRA√á√ÉO ===');
    
    // Verificar se h√° colaboradores cadastrados
    const colaboradoresCount = await db.collection('colaboradores').countDocuments({ ativo: true });
    console.log(`üë• Colaboradores ativos: ${colaboradoresCount}`);
    
    if (colaboradoresCount > 0) {
      const colaboradorSample = await db.collection('colaboradores').findOne({ ativo: true });
      console.log('üìÑ Estrutura do colaborador (amostra):');
      console.log(`   Nome: ${colaboradorSample.nome}`);
      console.log(`   Cargo: ${colaboradorSample.cargo || 'N/A'}`);
      console.log(`   CPF: ${colaboradorSample.cpf || 'N/A'}`);
      console.log(`   Condom√≠nio ID: ${colaboradorSample.condominio_id}`);
      console.log(`   Master ID: ${colaboradorSample.master_id}`);
    }
    
    // Verificar se h√° dados relacionados em outras cole√ß√µes
    const condominioFinanceiro = await db.collection('financeiro-condominios').countDocuments({
      origem_sistema: 'colaborador'
    });
    console.log(`üè¢ Lan√ßamentos financeiros de colaboradores em financeiro-condominios: ${condominioFinanceiro}`);
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar estrutura:', error);
  } finally {
    await client.close();
    console.log('\n‚úÖ Conex√£o fechada');
  }
}

// Execute apenas se for chamado diretamente
if (require.main === module) {
  checkCollectionStructure();
}

module.exports = checkCollectionStructure;