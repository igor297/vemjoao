import mongoose from 'mongoose'

// Configura√ß√£o autom√°tica para Railway vs Local
const getMongoURI = () => {
  console.log('üîç [MongoDB] Detectando ambiente...')
  console.log('üîç [MongoDB] PORT:', process.env.PORT)
  console.log('üîç [MongoDB] RAILWAY_ENVIRONMENT:', process.env.RAILWAY_ENVIRONMENT)
  console.log('üîç [MongoDB] NODE_ENV:', process.env.NODE_ENV)
  
  // Se estiver no Railway (detectar pela porta 8080 ou vari√°vel de ambiente)
  const isRailway = process.env.PORT === '8080' || process.env.RAILWAY_ENVIRONMENT || process.env.NODE_ENV === 'production'
  console.log('üîç [MongoDB] √â Railway?', isRailway)
  
  if (isRailway) {
    console.log('üîç [MongoDB] Usando configura√ß√£o Railway/Produ√ß√£o')
    console.log('üîç [MongoDB] MONGODB_URI dispon√≠vel?', !!process.env.MONGODB_URI)
    console.log('üîç [MongoDB] MONGO_URL dispon√≠vel?', !!process.env.MONGO_URL)
    console.log('üîç [MongoDB] MONGO_PUBLIC_URL dispon√≠vel?', !!process.env.MONGO_PUBLIC_URL)
    
    // MongoDB Railway interno para produ√ß√£o
    const uri = process.env.MONGODB_URI || process.env.MONGO_URL || process.env.MONGO_PUBLIC_URL || 'mongodb://localhost:27017/condominio-sistema'
    console.log('üîç [MongoDB] URI selecionada:', uri.substring(0, 50) + '...')
    return uri
  }
  
  console.log('üîç [MongoDB] Usando configura√ß√£o Local/Desenvolvimento')
  // Se estiver em desenvolvimento local, usar MongoDB local
  return process.env.MONGODB_URI || 'mongodb://localhost:27017/condominio-sistema'
}

const MONGODB_URI = getMongoURI()

if (!MONGODB_URI) {
  console.error('‚ùå [MongoDB] MONGODB_URI n√£o encontrada!')
  throw new Error('Please define the MONGODB_URI environment variable inside .env.local')
}

const isRailwayEnv = process.env.PORT === '8080' || process.env.RAILWAY_ENVIRONMENT || process.env.NODE_ENV === 'production'
console.log(`üîó [MongoDB] Conectando ao MongoDB: ${isRailwayEnv ? 'Railway (Produ√ß√£o)' : 'Local (Desenvolvimento)'}`)
console.log(`üîó [MongoDB] URI configurada: ${MONGODB_URI}`)

interface GlobalMongoDB {
  conn: typeof mongoose | null
  promise: Promise<typeof mongoose> | null
}

declare global {
  var mongodb: GlobalMongoDB | undefined
}

let cached = global.mongodb

if (!cached) {
  cached = global.mongodb = { conn: null, promise: null }
}

async function connectDB() {
  console.log('üîÑ [MongoDB] Fun√ß√£o connectDB chamada')
  console.log('üîÑ [MongoDB] Cached connection exists?', !!cached!.conn)
  
  if (cached!.conn) {
    console.log('‚úÖ [MongoDB] Retornando conex√£o cached existente')
    return cached!.conn
  }

  console.log('üîÑ [MongoDB] Cached promise exists?', !!cached!.promise)
  if (!cached!.promise) {
    console.log('üîÑ [MongoDB] Criando nova conex√£o...')
    console.log('üîÑ [MongoDB] URI COMPLETA para conex√£o:', MONGODB_URI)
    
    const opts = {
      bufferCommands: false,
      // üöÄ Performance: Connection pooling otimizado
      maxPoolSize: 10, // M√°ximo 10 conex√µes simult√¢neas
      serverSelectionTimeoutMS: 30000, // Timeout de sele√ß√£o do servidor (aumentado)
      socketTimeoutMS: 45000, // Timeout do socket
      connectTimeoutMS: 30000, // Timeout de conex√£o inicial
      family: 4, // Use IPv4, skip trying IPv6
      maxIdleTimeMS: 30000, // Fechar conex√µes inativas ap√≥s 30s
      // üöÄ Performance: Configura√ß√µes de retry
      retryWrites: true,
      retryReads: true,
    }
    
    console.log('üîÑ [MongoDB] Op√ß√µes de conex√£o:', JSON.stringify(opts, null, 2))

    cached!.promise = mongoose.connect(MONGODB_URI, opts).then(async (mongoose) => {
      console.log('üöÄ [MongoDB] Conex√£o estabelecida com sucesso!')
      console.log('üìä [MongoDB] Connection state:', mongoose.connection.readyState)
      console.log('üìä [MongoDB] Connection name:', mongoose.connection.name)
      console.log('üìä [MongoDB] Connection host:', mongoose.connection.host)
      console.log('üìä [MongoDB] Connection port:', mongoose.connection.port)
      
      // Verificar se a conex√£o est√° realmente funcionando
      if (mongoose.connection.db) {
        try {
          console.log('üîÑ [MongoDB] Executando ping no banco...')
          const pingResult = await mongoose.connection.db.admin().ping()
          console.log('‚úÖ [MongoDB] Ping bem-sucedido:', pingResult)
        } catch (pingError) {
          console.error('‚ùå [MongoDB] Erro no ping:', pingError)
        }
      } else {
        console.log('‚ö†Ô∏è [MongoDB] Database connection not ready, skipping ping')
      }
      
      // Executar auto-seed automaticamente no Railway
      const isRailway = process.env.PORT === '8080' || process.env.RAILWAY_ENVIRONMENT || process.env.NODE_ENV === 'production'
      console.log('üîÑ [MongoDB] Verificando se deve executar auto-seed. √â Railway?', isRailway)
      
      if (isRailway) {
        try {
          console.log('üå± [MongoDB] Executando auto-seed automaticamente...')
          const { autoSeed } = await import('./auto-seed')
          await autoSeed()
          console.log('‚úÖ [MongoDB] Auto-seed conclu√≠do com sucesso')
        } catch (error) {
          console.error('‚ö†Ô∏è [MongoDB] Erro no auto-seed:', error)
          console.error('‚ö†Ô∏è [MongoDB] Stack trace do auto-seed:', error instanceof Error ? error.stack : 'N/A')
          // Continua mesmo se o seed falhar
        }
      }
      
      console.log('‚úÖ [MongoDB] Setup completo, retornando mongoose instance')
      return mongoose
    }).catch((error) => {
      console.error('‚ùå [MongoDB] ERRO CR√çTICO na conex√£o:', error.message)
      console.error('‚ùå [MongoDB] C√≥digo do erro:', error.code)
      console.error('‚ùå [MongoDB] Stack trace:', error.stack)
      console.error('‚ùå [MongoDB] Objeto completo do erro:', JSON.stringify(error, null, 2))
      throw error
    })
  }

  try {
    console.log('üîÑ [MongoDB] Aguardando resolu√ß√£o da promise de conex√£o...')
    cached!.conn = await cached!.promise
    console.log('‚úÖ [MongoDB] Promise resolvida, conex√£o armazenada no cache')
  } catch (e) {
    console.error('‚ùå [MongoDB] Erro ao aguardar promise de conex√£o:', e)
    cached!.promise = null
    throw e
  }

  console.log('‚úÖ [MongoDB] Retornando conex√£o estabelecida')
  return cached!.conn
}

// Testar conex√£o ap√≥s defini√ß√£o da fun√ß√£o se estiver no Railway
if (isRailwayEnv) {
  console.log('üîÑ [MongoDB] Testando conex√£o Railway...')
  connectDB().then(() => {
    console.log('‚úÖ [MongoDB] Conex√£o Railway bem-sucedida!')
  }).catch((error) => {
    console.error('‚ùå [MongoDB] Falha na conex√£o Railway:', error.message)
    console.error('‚ùå [MongoDB] Stack trace:', error.stack)
  })
}

export default connectDB