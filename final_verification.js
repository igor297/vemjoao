const { MongoClient } = require('mongodb');

async function finalVerification() {
  const client = new MongoClient(process.env.MONGODB_URI || 'mongodb://localhost:27017/condominio-sistema');
  
  try {
    await client.connect();
    console.log('‚úÖ Conectado ao MongoDB');
    
    const db = client.db();
    
    // 1. Lista final de todas as cole√ß√µes
    console.log('\n=== LISTA FINAL DE COLE√á√ïES ===');
    const collections = await db.listCollections().toArray();
    const collectionNames = collections.map(c => c.name).sort();
    
    console.log(`üìã Total de cole√ß√µes: ${collectionNames.length}`);
    collectionNames.forEach((name, index) => {
      const isFinanceiro = name.toLowerCase().includes('financeiro');
      const icon = isFinanceiro ? 'üí∞' : 'üìÅ';
      console.log(`${(index + 1).toString().padStart(2, '0')}. ${icon} ${name}`);
    });
    
    // 2. An√°lise espec√≠fica das cole√ß√µes financeiras
    console.log('\n=== AN√ÅLISE DAS COLE√á√ïES FINANCEIRAS ===');
    const financeiroCollections = collectionNames.filter(name => 
      name.toLowerCase().includes('financeiro')
    );
    
    for (const collectionName of financeiroCollections) {
      console.log(`\nüí∞ ${collectionName.toUpperCase()}`);
      try {
        const count = await db.collection(collectionName).countDocuments();
        console.log(`   üìä Total de documentos: ${count}`);
        
        // Verificar estrutura se houver documentos
        if (count > 0) {
          const sample = await db.collection(collectionName).findOne();
          const fields = Object.keys(sample);
          console.log(`   üìÑ Campos (${fields.length}): ${fields.slice(0, 8).join(', ')}${fields.length > 8 ? '...' : ''}`);
          
          // Verificar dados espec√≠ficos baseados no tipo de cole√ß√£o
          if (collectionName === 'financeiro-colaboradores') {
            const tipos = await db.collection(collectionName).distinct('tipo');
            const status = await db.collection(collectionName).distinct('status');
            console.log(`   üè∑Ô∏è  Tipos: ${tipos.join(', ') || 'nenhum'}`);
            console.log(`   üìã Status: ${status.join(', ') || 'nenhum'}`);
          }
          
          if (collectionName === 'financeiro-condominios') {
            const origens = await db.collection(collectionName).distinct('origem_sistema');
            console.log(`   üîó Origens: ${origens.join(', ') || 'nenhuma'}`);
            
            // Verificar quantos s√£o de colaboradores
            const colaboradorDocs = await db.collection(collectionName).countDocuments({
              origem_sistema: 'colaborador'
            });
            if (colaboradorDocs > 0) {
              console.log(`   üë• Documentos de colaboradores: ${colaboradorDocs}`);
            }
          }
          
        } else {
          console.log('   üìÑ Cole√ß√£o vazia - estrutura ser√° criada conforme o modelo');
        }
        
        // Verificar √≠ndices
        const indexes = await db.collection(collectionName).listIndexes().toArray();
        console.log(`   üîç √çndices: ${indexes.length} (${indexes.map(i => i.name).join(', ')})`);
        
      } catch (error) {
        console.log(`   ‚ùå Erro ao analisar: ${error.message}`);
      }
    }
    
    // 3. Verificar relacionamentos
    console.log('\n=== VERIFICA√á√ÉO DE RELACIONAMENTOS ===');
    
    // Colaboradores base
    const colaboradoresCount = await db.collection('colaboradores').countDocuments();
    console.log(`üë• Colaboradores cadastrados: ${colaboradoresCount}`);
    
    if (colaboradoresCount > 0) {
      const colaboradorSample = await db.collection('colaboradores').findOne();
      console.log(`   üìÑ Exemplo: ${colaboradorSample.nome} - ${colaboradorSample.cargo || 'sem cargo'}`);
      console.log(`   üè¢ Condom√≠nio: ${colaboradorSample.condominio_id}`);
      console.log(`   üëë Master: ${colaboradorSample.master_id}`);
    }
    
    // Condominios
    const condominiosCount = await db.collection('condominios').countDocuments();
    console.log(`üè¢ Condom√≠nios cadastrados: ${condominiosCount}`);
    
    // Masters
    const mastersCount = await db.collection('masters').countDocuments();
    console.log(`üëë Masters cadastrados: ${mastersCount}`);
    
    // 4. Verificar integridade das configura√ß√µes
    console.log('\n=== VERIFICA√á√ÉO DE INTEGRIDADE ===');
    
    // Verificar se os modelos podem conectar corretamente
    console.log('üîç Verificando configura√ß√µes dos modelos...');
    
    // Verificar se existe algum documento √≥rf√£o (refer√™ncias inv√°lidas)
    if (colaboradoresCount > 0) {
      const colaboradores = await db.collection('colaboradores').find({}, {
        projection: { _id: 1, condominio_id: 1, master_id: 1, nome: 1 }
      }).toArray();
      
      let orphanCount = 0;
      for (const col of colaboradores) {
        // Verificar se o condom√≠nio existe
        const condominioExists = await db.collection('condominios').countDocuments({
          _id: col.condominio_id
        });
        
        // Verificar se o master existe
        const masterExists = await db.collection('masters').countDocuments({
          _id: col.master_id
        });
        
        if (!condominioExists || !masterExists) {
          orphanCount++;
          console.log(`   ‚ö†Ô∏è  Colaborador "${col.nome}" tem refer√™ncias inv√°lidas:`);
          if (!condominioExists) console.log(`      - Condom√≠nio ${col.condominio_id} n√£o existe`);
          if (!masterExists) console.log(`      - Master ${col.master_id} n√£o existe`);
        }
      }
      
      if (orphanCount === 0) {
        console.log('‚úÖ Todas as refer√™ncias de colaboradores est√£o √≠ntegras');
      } else {
        console.log(`‚ö†Ô∏è  ${orphanCount} colaborador(es) com refer√™ncias inv√°lidas`);
      }
    }
    
    // 5. Resumo final e status
    console.log('\n=== RESUMO FINAL ===');
    console.log('‚úÖ Migra√ß√£o da cole√ß√£o "financeirocolaboradors" ‚Üí "financeiro-colaboradores" conclu√≠da');
    console.log('‚úÖ Modelo FinanceiroColaborador configurado corretamente');
    console.log('‚úÖ √çndices preservados na migra√ß√£o');
    
    const financeiroStatus = {
      'financeiro-colaboradores': await db.collection('financeiro-colaboradores').countDocuments(),
      'financeiro-condominios': await db.collection('financeiro-condominios').countDocuments(),
      'financeiro-moradores': await db.collection('financeiro-moradores').countDocuments()
    };
    
    console.log('\nüìä Status das cole√ß√µes financeiras:');
    Object.entries(financeiroStatus).forEach(([collection, count]) => {
      console.log(`   ${collection}: ${count} documentos`);
    });
    
    console.log('\nüéØ Pr√≥ximos passos recomendados:');
    console.log('1. Testar cria√ß√£o de lan√ßamentos financeiros de colaboradores');
    console.log('2. Verificar sincroniza√ß√£o com financeiro-condominios');
    console.log('3. Validar APIs de financeiro-colaboradores');
    console.log('4. Executar testes de integra√ß√£o');
    
  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o final:', error);
  } finally {
    await client.close();
    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da e conex√£o fechada');
  }
}

// Execute apenas se for chamado diretamente
if (require.main === module) {
  finalVerification();
}

module.exports = finalVerification;